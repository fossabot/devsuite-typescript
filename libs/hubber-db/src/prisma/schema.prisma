// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("NX_MONGODB_URL")
}

model Session {
    id        String   @id @default(uuid()) @map("_id")
    sid       String   @unique
    data      String
    expiresAt DateTime
    web       Web?     @relation(fields: [webId], references: [id])
    webId     String?
}

type GitHubToken {
    accessToken           String
    expiresIn             Int
    refreshToken          String
    refreshTokenExpiresIn Int
    tokenType             String   @default("bearer")
    scope                 String
    createdAt             DateTime
}

model User {
    id        String   @id @default(uuid()) @map("_id")
    login     String   @unique
    emails    String[] @default([])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    web       Web[]
    webId     String?
}

enum HookSource {
    github
}

enum HookProcessingStatus {
    idle
    running
    done
}

model Hook {
    id        String               @id @default(uuid()) @map("_id")
    source    HookSource
    event     String
    remoteId  String
    status    HookProcessingStatus @default(idle)
    payload   Json
    createdAt DateTime             @default(now())
}

model DeployableRepo {
    id               String        @id @default(uuid()) @map("_id")
    creatorAuthToken String
    owner            String
    name             String
    config           String?
    createdAt        DateTime      @default(now())
    applications     Application[]
    web              Web           @relation(fields: [webId], references: [id])
    webId            String

    @@unique([creatorAuthToken, owner, name])
}

model Deployement {
    id             String       @id @default(uuid()) @map("_id")
    locations      String[]     @default([])
    createdAt      DateTime     @default(now())
    applications   Application? @relation(fields: [applicationsId], references: [id])
    applicationsId String?
}

model Domain {
    id            String       @id @default(uuid()) @map("_id")
    fqdn          String
    token         String
    verified      Boolean
    createdAt     DateTime     @default(now())
    application   Application? @relation(fields: [applicationId], references: [id])
    applicationId String?
}

model Application {
    id          String         @id @default(uuid()) @map("_id")
    web         Web            @relation(fields: [webId], references: [id])
    webId       String
    name        String
    bundleId    String
    domains     Domain[]
    license     String?
    version     String
    description String?
    author      String
    homepage    String?
    catogories  String[]       @default([])
    tags        String[]       @default([])
    logo        String?
    color       String?
    repo        DeployableRepo @relation(fields: [repoId], references: [id])
    repoId      String
    deployments Deployement[]
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model Web {
    id              String           @id @default(uuid()) @map("_id")
    name            String
    ephemerals      String[]         @default([])
    user            User?            @relation(fields: [userId], references: [id])
    userId          String?
    githubToken     GitHubToken?
    sessions        Session[]
    devices         Device[]
    deployableRepos DeployableRepo[]
    applications    Application[]
}

model Device {
    id        String   @id @default(uuid()) @map("_id")
    localId   String
    createdAt DateTime @default(now())
    lastUsed  DateTime
    web       Web?     @relation(fields: [webId], references: [id])
    webId     String?
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                       String  @id @default(uuid()) @map("_id")
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refreshToken            String? // @db.Text
//     refreshTokenExpiresIn Int? // @db.Text
//     accessToken             String? // @db.Text
//     expires_at               Int?
//     tokenType               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     @@unique([provider, providerAccountId])
// }
// model Session {
//     id           String   @id @default(uuid()) @map("_id")
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
// model User {
//     id            String    @id @default(uuid()) @map("_id")
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }
