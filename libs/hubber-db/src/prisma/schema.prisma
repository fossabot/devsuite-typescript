// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("NX_MONGODB_URL")
}

model Session {
    id        String   @id @default(uuid()) @map("_id")
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model User {
    id            String   @id @default(uuid()) @map("_id")
    login         String   @unique
    emails        String[] @default([])
    devices       String[] @default([])
    github_tokens Json[]   @default([])
    createdAt     DateTime @default(now())
}

model Hook {
    id        String   @id @default(uuid()) @map("_id")
    source    String
    event     String
    remoteId  String
    status    String   @default("idle")
    payload   String
    createdAt DateTime @default(now())
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                       String  @id @default(uuid()) @map("_id")
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     refresh_token_expires_in Int? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     @@unique([provider, providerAccountId])
// }
// model Session {
//     id           String   @id @default(uuid()) @map("_id")
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
// model User {
//     id            String    @id @default(uuid()) @map("_id")
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }
